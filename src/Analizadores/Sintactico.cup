package Analizadores;

/*Quitar los import Static y colocar una vez generado el archivo*/
import static ocl1_proyecto1.OCL1_Proyecto1.ListaErrores;
import static ocl1_proyecto1.OCL1_Proyecto1.ListaConjuntos;
import static ocl1_proyecto1.OCL1_Proyecto1.ListaVerificaciones;
import static ocl1_proyecto1.OCL1_Proyecto1.ListaExpresiones;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

action code
{:
    String instruccion="", segVerificar="";
:}

parser code
{:

    public void syntax_error(Symbol s){
       ListaErrores.add(new ArrayList(){{add("Sintactico"); add("Error Recuperable "+s.value+" , se esperaba otro token");add(s.left+1);add(s.right+1);}});
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
       ListaErrores.add(new ArrayList(){{add("Sintactico") ;add("Error NO Recuperable "+s.value+" , se esperaba otro token");add(s.left+1);add(s.right+1);}});
    }
:}

terminal String IDENTIFICADOR,CONJUNTO,EXPRESION,FRASE,CONJ,SEPARADOR;
terminal LLAVE_APERTURA,LLAVE_CIERRE,DOS_PTS,PT_COMA,ASIGNACION;

nonterminal String CONJUNTOS,EXPRESIONES,VERIFICACIONES,SEPARADORES;
nonterminal INICIO;


start with INICIO;

INICIO::= LLAVE_APERTURA CONJUNTOS EXPRESIONES SEPARADORES:sep VERIFICACIONES LLAVE_CIERRE
    {:  
        if(!sep.equals("%%")){
            System.out.println("Exceso de separadores");
        }
        System.out.println("{\n"+instruccion+"%%\n"+segVerificar+"}");
    :}
;

SEPARADORES::= SEPARADOR:sep SEPARADORES:seps
    {:
        RESULT = sep+seps;
    :}
    | SEPARADOR:sep
    {:
        RESULT = sep;
    :}
;

CONJUNTOS::= CONJ:conj DOS_PTS IDENTIFICADOR:id ASIGNACION CONJUNTO:co PT_COMA
    {:
        instruccion += conj+": "+id+" -> "+co+";\n";
        ListaConjuntos.add(new ArrayList(){{add(id);add(co);}});
    :}  
    | CONJUNTOS:sigcon CONJ:conj DOS_PTS IDENTIFICADOR:id ASIGNACION CONJUNTO:co PT_COMA 
    {:
        instruccion += conj+": "+id+" -> "+co+";\n";
        ListaConjuntos.add(new ArrayList(){{add(id);add(co);}});
    :} 
    | error PT_COMA
;


EXPRESIONES::= IDENTIFICADOR:id ASIGNACION EXPRESION:ex PT_COMA
    {:
        instruccion += id+" -> "+ex+";\n";
        ListaExpresiones.add(new ArrayList(){{add(id);add(ex);}});
    :} 
    |EXPRESIONES:sigexp IDENTIFICADOR:id ASIGNACION EXPRESION:ex PT_COMA 
    {:
        instruccion += id+" -> "+ex+";\n";
        ListaExpresiones.add(new ArrayList(){{add(id);add(ex);}});
    :}
    | error PT_COMA
    | error SEPARADOR
;


VERIFICACIONES::= IDENTIFICADOR:id DOS_PTS FRASE:fra PT_COMA
    {:
        segVerificar += id+" : \""+fra+"\";\n";
        ListaVerificaciones.add(new ArrayList(){{add(id);add(fra);}});
    :}  
    |VERIFICACIONES:sigver IDENTIFICADOR:id DOS_PTS FRASE:fra PT_COMA 
    {:
        segVerificar += id+" : \""+fra+"\";\n";
        ListaVerificaciones.add(new ArrayList(){{add(id);add(fra);}});
    :}
    | error PT_COMA
    | error SEPARADOR
;